V0.1.5 - Fixed Toggle Display problem ('splice' command 2ng arg was 1 higher than it should be.). Made memory cells read only.


    public getInput = async(): Promise<number> => {
        this.input.readOnly = false;
        return new Promise<number>((resolve) => {
            const handleClick = () => {
                let userInput = this.input.value.trim().replace(/\s+/g, '');
                if ((/^-?(?:[1-9]?\d{1,2}|0)$/).test(userInput)) {
                    this.input.readOnly = true;
                    this.submitInput.removeEventListener("click", handleClick);
                    resolve(parseInt(userInput, 10));
                } else {
                    this.input.value = "Invalid - enter integer between -999 and 999!";
                }
            };

            this.submitInput.addEventListener("click", handleClick);
        });
    }

    public getInput():Promise<number>{
        //* returns promise because it must wait for user the submit the correct input first.
        this.input.readOnly = false;
        return new Promise((resolve) => {
            this.submitInput.addEventListener("click",() => {
                let userInput = this.input.value;
                userInput = userInput.replace(/\s+/g, '');
                //^ regex expression for removing whitespaces
                if ((/^-?(?:[1-9]?\d{1,2}|0)$/).test(userInput)) {
                    //* validation - if valid then settle promise (and input becomes read only again)
                    this.input.readOnly = true;
                    resolve(parseInt(this.input.value));
                }
                this.input.value = "Invalid - enter integer between -999 and 999!";
                //^ far simpler to display error in textbox than calling parent class instance
            },{
                once: true
            })
        });
    }

//^ 'controlUnit?' optional parameter not because it may not be used but to uphold the code standard â€“ recyclable/reusable and independent

//function addRowIfNeeded(textbox:HTMLInputElement):void{ editorUI.generateLine(textbox); }
//function navigateEditor(event:KeyboardEvent):void{ editorUI.navigationCheck(event); }

<span>Program Counter</span>
<div class="col-xs-2"><input type="text" class="form-control readonly-input" readonly></div>
data-bs-theme="dark"
/*
class CompilerUI{

    private validate(script:string[][]):boolean{
        let labels:Map<string, number> = new Map<string, number>();
        let instructions = ["ADD", "SUB", "STA", "LDA", "SHL", "SHR", "BRA", "BRZ", "BRP", "INP", "OUT", "HLT", "DAT"];
        let noOperands = ["SHL", "SHR", "INP", "OUT", "HLT"];
        let mandatoryOperands = ["ADD", "SUB", "STA", "LDA", "BRA", "BRZ", "BRP", "DAT"];

        for (let row = 0; row < script.length; row++){
            //* many constants are used as compiler does not recognise list[index] for fixing TS-2532
            const line = script[row];
            if (line === undefined){ break; }
            for (let column = 0; column < 3; column++){
                const token = line[column];
                if (token === undefined){ break; }

                //: formatting the token - makes validation much easier and formatting does not give errors.
                token.replace(/\s+/g, '');
                //^ Removes all whitespaces.
                //^ Learned about 'regular expressions' on https://www.regexone.com/ .
                token.replace(/./g, (char) => char.toUpperCase());
                //^ capitalises all characters

                //: validating the token
                if ((/[^A-Z0-9]/).test(token)){ return false; }
                //^ Does token contain any character that is not alphanumeric?
                //^ Makes token only consists alphanumeric characters (26 letters A-Z and numerical digits 0-9).
                switch (column){
                    case 0:
                        if (token == ""){ break; }
                        //^ Does current line have a label?
                        if (labels.has(token)){ return false; }
                        //^ Is label already defined?
                        //^ If code line has a label, it must be unique.
                        break;
                    case 1:
                        if (!instructions.includes(token)){ return false; }
                        if (noOperands.includes(token)){
                            if (line[2] != ""){ return false; }
                        }
                        //: if instruction requires an operand/address
                        if (line[2] != ""){ return false; }

                        break;
                    default: //< 2

            }
        }
        return true;
    }
    private validate(script: string[][]): void {
        for (let line = 0; line < script.length; line++) {
            const lineContent = script[line];
            if (lineContent === undefined) { break; }

            for (let token = 0; token < 3; token++) {
                const tokenContent = lineContent[token];
                if (tokenContent === undefined) { break; }
                lineContent[token] = tokenContent.replace(/\s+/g, '');
                // ^ Removes all whitespaces.
                // ^ Learned about 'regular expressions' on https://www.regexone.com/.
            }
        }
    }


    private labels(tokens:string[][]):number{
        //* check and format the labels
        let labels:Map<string, number> = new Map<string, number>();
        for (let codeLine = 0; codeLine < tokens.length; codeLine++){
            if (tokens[codeLine][0] != "" ){

            }
            if (tokens[codeLine][0] != "" ){

            }
        return 0;
        }
    }
}
    */

    describe("Testing valid code without labels",() => {});

        test('All branch instructions - 3 operands of different label addresses with extreme naming', () => {
            const preCompiled:string[][] = [
                ["", "INP", ""],
                ["", "OUT", ""],
                ["", "BRZ", " O NE "],
                //^ whitepace before, in-middle, and after label
                ["", "BRP", "t2wo22"],
                //^ label contains numerical digits inside and at end but not at the beginning
                ["", "BRA", "i"],
                //^ label is a singular character
                ["", "OUT", ""],
                [" o ne ", "OUT", ""],
                ["t2wo22", "OUT", ""],
                ["i", "HLT", ""]
            ];

            const compiler:Compiler = new Compiler();
            const compiled:number[]|string = compiler.validateAndCompile(preCompiled);

            expect(compiled).toStrictEqual([901,902,705,806,607,902,902,902,0]);
            //^ ' o ne ', 't2wo22', 'i' should be at addresses '5', '6', '7' respectively
        });
        test('Modified pre-compiled script of the "add/subtr" program (from LMCCompatibility.test.ts) - variations of the same label', () => {
            const preCompiled:string[][] = [
                ["buffer1", "DAT", ""],
                //^ all label referances should all referance the same label
                ["", "INP", ""],
                ["", "STA", " b    uf fer1 "],
                //^ label with whitespacing
                ["", "INP", ""],
                ["", "ADD", "bUFFeR1"],
                //^ label with some letters in upper-case
                ["", "OUT", " B u F f E R 1 "],
                //^ label with both whitespacing and some upper-case
                ["", "HLT", ""]
            ];

            const compiler:Compiler = new Compiler();
            const compiled:number[]|string = compiler.validateAndCompile(preCompiled);

            expect(compiled).toStrictEqual([901,300,901,100,902,0]);
            //^ buffer1 should be at memory address '0'
        });